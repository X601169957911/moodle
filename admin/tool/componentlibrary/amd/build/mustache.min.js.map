{"version":3,"sources":["../src/mustache.js"],"names":["renderTemplate","container","templateName","context","JSON","parse","e","Log","debug","Templates","renderForPromise","html","js","rendercontainer","querySelector","selectors","mustacherendered","replaceNodeContents","loadTemplate","sourcecontainer","mustachesource","contextcontainer","mustachecontext","parts","split","component","shift","name","join","request","methodname","args","template","themename","Config","theme","includecomments","Ajax","call","done","source","textContent","example","match","window","console","log","precontainer","document","createElement","parsedContext","innerHTML","stringify","parentNode","appendChild","classList","add","fail","Notification","exception","init","querySelectorAll","mustachecode","forEach","getAttribute","mustacherawcontext"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This is called from to render mustache templates\n *\n * @module     tool_componentlibrary/mustache\n * @package    tool_componentlibrary\n * @copyright  2021 Bas Brands <bas@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// define(['jquery', 'core/ajax', 'core/log', 'core/notification', 'core/templates', 'core/config', 'core/str'],\n//        function($, ajax, log, notification, templates, config, str) {\n\nimport selectors from 'tool_componentlibrary/selectors';\nimport Ajax from 'core/ajax';\nimport Config from 'core/config';\nimport Templates from 'core/templates';\nimport Log from 'core/log';\nimport Notification from 'core/notification';\n\n/**\n * Handle a template loaded response.\n *\n * @param {String} container The template container\n * @param {String} templateName The template name\n * @param {String} contaxt Data for the template.\n */\nconst renderTemplate = async(container, templateName, context) => {\n    try {\n        context = JSON.parse(context);\n    } catch (e) {\n        Log.debug('Could not parse json example context for template.');\n        Log.debug(e);\n    }\n\n    const {html, js} = await Templates.renderForPromise(templateName, context);\n\n    const rendercontainer = container.querySelector(selectors.mustacherendered);\n\n    // Load the rendered content in the renderer tab.\n    await Templates.replaceNodeContents(rendercontainer, html, js);\n};\n\n/**\n * Load the a template source from Moodle.\n *\n * @param {String} container The template container\n * @param {String} templateName The template name\n * @param {String} contaxt Data for the template.\n */\nconst loadTemplate = (container, templateName, context) => {\n        const sourcecontainer = container.querySelector(selectors.mustachesource);\n        const contextcontainer = container.querySelector(selectors.mustachecontext);\n\n        var parts = templateName.split('/');\n        var component = parts.shift();\n        var name = parts.join('/');\n\n        var request = {\n            methodname: 'core_output_load_template',\n            args: {\n                component: component,\n                template: name,\n                themename: Config.theme,\n                includecomments: true\n            }\n        };\n\n        Ajax.call([request])[0]\n            .done((source) => {\n                // Load the source template in Template tab.\n                sourcecontainer.textContent = source;\n                if (!context) {\n                    const example = source.match(/Example context \\(json\\):([\\s\\S]+?)(}})/);\n                    context = example[1];\n                    window.console.log(context);\n                    // Load the variables in the Variables tab.\n                    const precontainer = document.createElement(\"pre\");\n                    let parsedContext = JSON.parse(context);\n                    window.console.log(parsedContext);\n                    precontainer.innerHTML = JSON.stringify(parsedContext, null, 4);\n                    contextcontainer.parentNode.appendChild(precontainer);\n                    contextcontainer.classList.add('d-none');\n                }\n                renderTemplate(container, templateName, context);\n            })\n            .fail(Notification.exception);\n};\n\nexport const init = () => {\n    document.querySelectorAll(selectors.mustachecode).forEach((container) => {\n        const templateName = container.getAttribute('data-template');\n        let context = container.querySelector(selectors.mustacherawcontext).textContent;\n        loadTemplate(container, templateName, context);\n    });\n};\n"],"file":"mustache.min.js"}